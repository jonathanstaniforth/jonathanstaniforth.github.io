I"0<p><strong>Dotfiles</strong> are configuration files that hold the settings for applications, such
as <a href="https://www.vim.org/">vim</a>, and are usually located in your $HOME directory.
These files allow you to optimise your workflow by customising your development
environment. However, as the number of dotfiles grows, keeping them in sync
between the different machines that I use has become an increasing problem.
Therefore, this article discusses my solution to keeping my dotfiles organised
and syncronised between my machines.</p>

<p>A quick Google search results in many solutions to this problem being returned.
These solutions generally range from writing your own shell scripts to using
open-source projects. <a href="https://dotfiles.github.io/">dotfiles.github.io</a> provides
a large list of available tools, frameworks, and examples to help with your development.</p>

<p>I decided to avoid writing my own script as this would have involved a lot of
development. Therefore, I looked for a project that could handle my dotfiles for
me in a simple and elegant way.
Out of the large number of available projects, I narrowed my search to a small set of the most popular:
<a href="https://github.com/technicalpickles/homesick">homesick</a>;
<a href="https://github.com/andsens/homeshick">homeshick</a>;
<a href="https://github.com/thoughtbot/rcm">rcm</a>; and, <a href="https://yadm.io/#">yadm</a>.</p>

<p><strong>Homesick</strong> immediately stood out to me due to its name, which perfectly describes
the feeling I get when I use a machine that doesn’t have my configurations;
frustration, annoyance, and a desire to return to my own environment when
the machine doesn’t respond in the way I expect. However, I quickly moved on
from homesick as it is written in ruby, which can be difficult to manage with
macOS systems.</p>

<p><strong>Homeshick</strong> provides a shell implementation of homesick, avoiding the complexity
of managing ruby. However, the install was still not as elegant as I
would like, as it requires adding functions to my <strong>config.fish</strong> file.</p>

<p>Looking at <strong>rcm</strong>, this program was given good reviews by several sources
and, therefore, I decided to take a look. However, the documentation for the
project was not easy to read, and installing not clearly defined. While
I could have setup rcm if I spent more time looking at it, this was
more than I wanted to.</p>

<p>Next in line was <strong>yadm</strong>. With the name standing for “yet another dotfiles
manager”, it was openly admitting to being another manager that was adding to
the already huge pile of other available managers.
I was hoping this meant it would improve on what the other projects lacked,
simplicity and elegance. The documentation featured a
basic design, but, complex enough to appropriately organise and quickly convey the
required information to setup yadm. Additionally, yadm is based on git, meaning
I already knew the basics. Therefore, I decided to try yadm and see what happens.</p>

<h2 id="setting-up-yadm">Setting up yadm</h2>
<p>To setup yadm, first I had to install it on my machine, which runs macOS. A brew
installation is available, so I ran the following:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew update

brew <span class="nb">install </span>yadm
</code></pre></div></div>

<p>Since I haven’t previously setup yadm, I created a new instance:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yadm init
</code></pre></div></div>

<p>This created a new folder <code class="language-plaintext highlighter-rouge">~/.config/yadm</code> with a new git instance. From
here, I could add my current dotfiles to yadm, like so:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yadm add .hyper.js
yadm add .vimrc
yadm add .config/fish

yadm commit
</code></pre></div></div>

<p>Now that my dotfiles are organised, it’s time to setup the synchronisation. 
Firstly, I setup a GitHub repository called <a href="https://github.com/jonathanstaniforth/dotfiles">dotfiles</a>,
and then set yadm to use that as a remote repository:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yadm remote add origin https://github.com/jonathanstaniforth/dotfiles

yadm push <span class="nt">-u</span> origin master
</code></pre></div></div>

<h2 id="setting-up-yadm-on-additional-machines">Setting up yadm on additional machines</h2>
<p>Now that the initial setup of yadm is complete, I now need to setup yadm on my
other machines. This part is simpler since most of the work was done in the
initial setup. To start, I installed yadm on my Ubuntu machine:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt update

<span class="nb">sudo </span>apt <span class="nb">install </span>yadm
</code></pre></div></div>

<p>Next, I cloned the dotfiles repository using yadm:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yadm clone https://github.com/jonathanstaniforth/dotfiles
</code></pre></div></div>

<p>Now my dotfiles can be synchroised using <code class="language-plaintext highlighter-rouge">yadm pull</code>.</p>

:ET