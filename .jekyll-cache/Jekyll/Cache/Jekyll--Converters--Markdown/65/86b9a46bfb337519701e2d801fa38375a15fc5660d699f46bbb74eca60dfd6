I"•&<p>Telegram has an API that allows external systems, called a bot, to be used inside of the Telegram app through the sending and recieving of messages, called the <a href="https://core.telegram.org/bots/api">Telegram Bot API</a>. Essentially, an external system holds the logic of the bot, and contains an API endpoint which Telegram calls when a user wants to interact with the bot. This interaction can occur as either direct messages in a private chat or with an <strong>@</strong> mention in groups. I have been experimenting with the Telegram Bot API to see what it can do, and this post provides a few notes on its use.</p>

<h2 id="message-object">Message Object</h2>
<p>Telegram will send a <a href="https://core.telegram.org/bots/api#message">message object</a> to your APIâ€™s endpoint. This object can contain a lot of information, however, the core information youâ€™ll most likely need is the following:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"message_id"</span><span class="p">:</span><span class="w"> </span><span class="err">Integer</span><span class="p">,</span><span class="w">
    </span><span class="nl">"chat"</span><span class="p">:</span><span class="w"> </span><span class="err">Chat</span><span class="w"> </span><span class="err">object</span><span class="p">,</span><span class="w">
    </span><span class="nl">"text"</span><span class="p">:</span><span class="w"> </span><span class="err">String</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>The <strong>message_id</strong> property can be used to unique identify the message within the specific chat in which it was sent, which can be used to reply specifically to the message. <strong>chat</strong> contains information relating to the chat in which the message was sent, and used to send a reply to that chat. The <strong>text</strong> property holds the actual message that was sent.</p>

<h2 id="chat-object">Chat Object</h2>
<p>As discussed above, the chat object has information that is needed to send a reply, specifically the id property. Additionally, it states the type of the chat, e.g. private or group chat, which can be used to change the behaviour of the system to suit the situation in which itâ€™s used. An example of the chat object is below:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="err">chat</span><span class="w"> </span><span class="err">ID</span><span class="p">,</span><span class="w">
    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"private"</span><span class="p">,</span><span class="w"> </span><span class="s2">"group"</span><span class="p">,</span><span class="w"> </span><span class="s2">"supergroup"</span><span class="p">,</span><span class="w"> </span><span class="s2">"channel"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h2 id="message-entities">Message Entities</h2>
<p>The message object can provide a list of strings that have special meanings, such as bot commands, under the <a href="https://core.telegram.org/bots/api#messageentity">message entities</a> key. For example:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"bot_command"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"offset"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w">
    </span><span class="nl">"length"</span><span class="p">:</span><span class="w"> </span><span class="mi">4</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>This can be helpful in identifying where bot commands are in the text of a message. But, you need to extract the command from the text, using the <strong>offset</strong> and <strong>length</strong> properties, to know which command was sent. Additionally, I have found that you cannot rely on the message entities list being provided, as Telegram will not always supply it in the message object. Therefore, itâ€™s best to identify the bot commands yourself, with a possible solution for use in group chats shown below:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">private</span> <span class="k">function</span> <span class="n">getCommand</span><span class="p">(</span><span class="nv">$text</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// List of available commands</span>
    <span class="nv">$commands</span> <span class="o">=</span> <span class="p">[</span>
        <span class="s1">'start'</span><span class="p">,</span>
        <span class="s1">'resume'</span><span class="p">,</span>
        <span class="s1">'play'</span>
    <span class="p">];</span>

    <span class="nv">$text</span> <span class="o">=</span> <span class="nb">str_replace</span><span class="p">(</span><span class="s1">'@bot_name'</span><span class="p">,</span> <span class="s1">''</span><span class="p">,</span> <span class="nv">$text</span><span class="p">);</span> <span class="c1">// Remove the bot name from the text</span>
    <span class="nv">$text</span> <span class="o">=</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">$text</span><span class="p">);</span> <span class="c1">// Remove any whitespace from the beginning and end of the text</span>
    <span class="nv">$first_character</span> <span class="o">=</span> <span class="nb">substr</span><span class="p">(</span><span class="nv">$text</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span> <span class="c1">// Extract the first character from the text</span>

    <span class="c1">// If the first character is a /, extract the rest of the text</span>
    <span class="k">if</span> <span class="p">(</span><span class="nv">$first_character</span> <span class="o">===</span> <span class="s1">'/'</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$text</span> <span class="o">=</span> <span class="nb">substr</span><span class="p">(</span><span class="nv">$text</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nv">$tokens</span> <span class="o">=</span> <span class="nb">explode</span><span class="p">(</span><span class="s1">' '</span><span class="p">,</span> <span class="nv">$text</span><span class="p">);</span> <span class="c1">// Create a list of words</span>
    <span class="nv">$available_commands</span> <span class="o">=</span> <span class="nb">array_intersect</span><span class="p">(</span><span class="nv">$commands</span><span class="p">,</span> <span class="nv">$tokens</span><span class="p">);</span> <span class="c1">// Identify the commands that are found in the list of words</span>
    
    <span class="c1">// If no commands found, return false</span>
    <span class="k">if</span> <span class="p">(</span><span class="nb">sizeof</span><span class="p">(</span><span class="nv">$available_commands</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="c1">// Return the first found command</span>
    <span class="k">return</span> <span class="nv">$available_commands</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="sending-a-response">Sending a Response</h2>
<p>To send a response message to the Telegram Bot API, create a POST request to <strong>https://api.telegram.org/</strong> with the following object in the body of the request:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"chat_id"</span><span class="p">:</span><span class="w"> </span><span class="err">Chat</span><span class="w"> </span><span class="err">ID</span><span class="w"> </span><span class="err">from</span><span class="w"> </span><span class="err">chat</span><span class="w"> </span><span class="err">object</span><span class="p">,</span><span class="w">
    </span><span class="nl">"text"</span><span class="p">:</span><span class="w"> </span><span class="err">Your</span><span class="w"> </span><span class="err">reply</span><span class="p">,</span><span class="w">
    </span><span class="nl">"reply_to_message_id"</span><span class="p">:</span><span class="w"> </span><span class="err">Message</span><span class="w"> </span><span class="err">ID</span><span class="w"> </span><span class="err">from</span><span class="w"> </span><span class="err">message</span><span class="w"> </span><span class="err">object</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Below is a GitHub Gist which can be used in a Laravel project to easily send responses of different types, such as texts, locations, and animations.</p>

<script src="https://gist.github.com/jonathanstaniforth/a42160d4cefb5e4bd61fd1c56cb00845.js"></script>

:ET