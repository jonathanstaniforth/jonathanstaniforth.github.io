I" <p>The enumerated data type (enum) provides a convenient way to constraint a column to a set of values.
However, the implementation of enum in <a href="https://laravel.com">Laravel</a> is not as it seems, and changing the set of values can prove difficult later on.
This post looks at how Laravel sets a column to enum in the database and provides details on how to change the available set of values using a migration script.</p>

<h2 id="laravel-enum">Laravel Enum</h2>
<p>As already mentioned, when a column is set to enum in a migration script, the resulting data type in the database for that column is different.
Below shows an example of a migration script setting a column to enum and the resulting data type in the database.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">function</span> <span class="n">up</span><span class="p">()</span>
<span class="p">{</span>
    <span class="nc">Schema</span><span class="o">::</span><span class="nf">create</span><span class="p">(</span><span class="s1">'messages'</span><span class="p">,</span> <span class="k">function</span> <span class="p">(</span><span class="kt">Blueprint</span> <span class="nv">$table</span><span class="p">)</span> <span class="p">{</span>
        <span class="mf">...</span>
        <span class="nv">$table</span><span class="o">-&gt;</span><span class="nf">enum</span><span class="p">(</span><span class="s1">'status'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'draft'</span><span class="p">,</span> <span class="s1">'sent'</span><span class="p">,</span> <span class="s1">'read'</span><span class="p">]);</span>
        <span class="mf">...</span>
    <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Column     |              Type              | Collation | Nullable | Default                 
-----------+--------------------------------+-----------+----------+-----------------------------------------
...
status     | character varying(255)         |           | not null  |
...
</code></pre></div></div>

<p>As can be seen in the data description above, the data type set for the status column in the database is character varying(255).
This can be seen in the <a href="https://github.com/laravel/framework/blob/0fd4c5c58982ce255733baf10f3fdb2eee24e510/src/Illuminate/Database/Schema/Grammars/PostgresGrammar.php#L616">source code of Laravel</a>.</p>

<p>Therefore, to limit the column to only the set of values provided, a constraint is added to the column, as shown below.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Check constraints:
    "messages_status_check" CHECK (status::text = ANY (ARRAY['draft'::character varying, 'sent'::character varying, 'read'::character varying]::text[]))
</code></pre></div></div>

<h2 id="updating-an-enum">Updating an Enum</h2>
<p>Looking at the <a href="https://laravel.com/docs/7.x/migrations#modifying-columns">Laravel documentation</a>, it states that updating a column with type enum is not supported when using the <a href="https://www.doctrine-project.org">Doctrine DBAL library</a>.
However, since we know about the actual implementation of an enum column, discussed above, we can look for a method of updating such a column.</p>

<p>An approach that can be taken to altering the constraint is shown below.
First, the constraint is dropped.
Second, the new constraint is generated as a string.
Finally, the new constraint is applied to the messages table.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>

<span class="kn">use</span> <span class="nc">Illuminate\Database\Migrations\Migration</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">Illuminate\Database\Schema\Blueprint</span><span class="p">;</span>
<span class="kn">use</span> <span class="no">Illuminate\Support\Facades\DB</span><span class="p">;</span>
<span class="kn">use</span> <span class="nc">Illuminate\Support\Facades\Schema</span><span class="p">;</span>

<span class="kd">class</span> <span class="nc">ChangeEnum</span> <span class="kd">extends</span> <span class="nc">Migration</span>
<span class="p">{</span>
    <span class="cd">/**
     * Run the migrations.
     *
     * @return void
     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">up</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="no">DB</span><span class="o">::</span><span class="nf">statement</span><span class="p">(</span><span class="s2">"ALTER TABLE messages DROP CONSTRAINT messages_status_check"</span><span class="p">);</span>

        <span class="nv">$types</span> <span class="o">=</span> <span class="p">[</span><span class="s1">'draft'</span><span class="p">,</span> <span class="s1">'sent'</span><span class="p">,</span> <span class="s1">'read'</span><span class="p">,</span> <span class="s1">'replied'</span><span class="p">];</span>
        <span class="nv">$result</span> <span class="o">=</span> <span class="nb">join</span><span class="p">(</span> <span class="s1">', '</span><span class="p">,</span> <span class="nb">array_map</span><span class="p">(</span><span class="k">function</span> <span class="p">(</span><span class="nv">$value</span><span class="p">){</span>
            <span class="k">return</span> <span class="nb">sprintf</span><span class="p">(</span><span class="s2">"'%s'::character varying"</span><span class="p">,</span> <span class="nv">$value</span><span class="p">);</span>
        <span class="p">},</span> <span class="nv">$types</span><span class="p">));</span>

        <span class="no">DB</span><span class="o">::</span><span class="nf">statement</span><span class="p">(</span><span class="s2">"ALTER TABLE messages ADD CONSTRAINT messages_status_check CHECK (status::text = ANY (ARRAY[</span><span class="nv">$result</span><span class="s2">]::text[]))"</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="cd">/**
     * Reverse the migrations.
     *
     * @return void
     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">down</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="c1">//</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<blockquote>
  <p>View this code as a <a href="https://gist.github.com/jonathanstaniforth/c48b22960ce13bf303c8e04a591c0ef3">GitHub Gist</a>.</p>
</blockquote>

<h2 id="summary">Summary</h2>
<p>To summarise, this post investigated the enum data type used by Laravel.
First, an example of how a column can be set to the type enum using a migration script is shown.
Second, the actual implementation of the enum type in the database was revealed.
Finally, an example of how to update a column that has been set to enum was presented, as it is not currently supported by the Doctrine DBAL library.</p>
:ET