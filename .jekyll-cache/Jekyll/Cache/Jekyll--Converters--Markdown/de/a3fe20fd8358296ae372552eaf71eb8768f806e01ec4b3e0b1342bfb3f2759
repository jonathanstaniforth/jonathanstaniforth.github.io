I"=w<p>When testing, the behaviour of production code should be checked in all possible states.
However, creating these states can be difficult and each state may require large scripts to establish the right environment.
Therefore, a method of imitating the behaviour of production code, called <strong>mocking</strong>, is used to alleviate this problem.</p>

<p>Mocking involves creating <a href="https://en.wikipedia.org/wiki/Mock_object"><strong>mock objects</strong></a> that replace real objects established by production code and simulate their behaviour.
Python has a library that contains several tools to create mock objects easily, however, there are a few concepts that are not so apparent and can cause problems if not understood.
This post reviews the main tools found in the library and goes into detail for the areas may present issues.</p>

<h2 id="the-mock-library">The Mock Library</h2>
<p>To perform mocking, python has a standard library called <a href="https://docs.python.org/3/library/unittest.mock.html"><strong>mock</strong></a> that contains several classes and decorators that can be used to mock different types of objects.
Using these tools, the interaction of production code with a mock object can be examined and, therefore, is useful in understanding its behaviour.
Additionally, mock objects can help to isolate production code, reducing their reliance on external factors, such as <a href="https://realpython.com/python-mock-library/">communication with servers</a>.</p>

<blockquote>
  <p>For more information on reviewing the behaviour of production code, view the <a href="/2020/05/23/using-test-driven-development-to-design-and-enforce-behaviour.html">Using Test-Driven Development to Design &amp; Enforce Behaviour</a> post.</p>
</blockquote>

<h3 id="mock-class">Mock class</h3>
<p>The mock library contains the <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock"><strong>Mock class</strong></a> which can be used to create mock objects.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">unittest.mock</span> <span class="kn">import</span> <span class="n">Mock</span>

<span class="n">mock_object</span> <span class="o">=</span> <span class="n">Mock</span><span class="p">()</span>
<span class="c1"># &lt;Mock id='...'&gt;
</span></code></pre></div></div>

<p>To simulate the behaviour of any object, mock objects create all attributes and methods as they are accessed.
These attributes and methods accept any arguments and return new singleton instances of <code class="language-plaintext highlighter-rouge">Mock</code>, i.e. an attribute or method called multiple times will return the same <code class="language-plaintext highlighter-rouge">Mock</code> instance.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># A new mock object
</span><span class="n">mock_object</span><span class="p">.</span><span class="n">get</span><span class="p">()</span>
<span class="c1"># &lt;Mock name='mock.get()' id='1'&gt;
</span>
<span class="c1"># A new mock object that is different to above
</span><span class="n">mock_object</span><span class="p">.</span><span class="nb">set</span><span class="p">()</span>
<span class="c1"># &lt;Mock name='mock.set()' id='2'&gt;
</span>
<span class="c1"># The same mock object as the first above
</span><span class="n">mock_object</span><span class="p">.</span><span class="n">get</span><span class="p">()</span>
<span class="c1"># &lt;Mock name='mock.get()' id='1'&gt;
</span></code></pre></div></div>

<p>Additionally, it contains several methods that can be used to check how production code interacts with the mock object.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mock_object</span><span class="p">.</span><span class="n">get</span><span class="p">.</span><span class="n">assert_called_once</span><span class="p">()</span>

<span class="nb">AssertionError</span><span class="p">:</span> <span class="n">Expected</span> <span class="s">'get'</span> <span class="n">to</span> <span class="n">have</span> <span class="n">been</span> <span class="n">called</span> <span class="n">once</span><span class="p">.</span> <span class="n">Called</span> <span class="mi">2</span> <span class="n">times</span><span class="p">.</span>
<span class="n">Calls</span><span class="p">:</span> <span class="p">[</span><span class="n">call</span><span class="p">(),</span> <span class="n">call</span><span class="p">()].</span>
</code></pre></div></div>

<blockquote>
  <p>These assert methods will raise an <code class="language-plaintext highlighter-rouge">AssertionError</code> exception if the condition is not met, otherwise they return <code class="language-plaintext highlighter-rouge">None</code>.</p>
</blockquote>

<h4 id="return-value">Return value</h4>
<p>A mock object can be set to return a specific value when called, using the <code class="language-plaintext highlighter-rouge">return_value</code> attribute, as shown below:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Set in the constructor
</span><span class="n">mock_object</span> <span class="o">=</span> <span class="n">Mock</span><span class="p">(</span><span class="n">return_value</span><span class="o">=</span><span class="s">'Hello'</span><span class="p">)</span>
<span class="n">mock_object</span><span class="p">()</span>
<span class="c1"># Hello
</span>
<span class="c1"># Set in the attribute
</span><span class="n">mock_object</span> <span class="o">=</span> <span class="n">Mock</span><span class="p">()</span>
<span class="n">mock_object</span><span class="p">.</span><span class="n">return_value</span> <span class="o">=</span> <span class="s">'World'</span>
<span class="n">mock_object</span><span class="p">()</span>
<span class="c1"># World
</span></code></pre></div></div>

<h4 id="side-effects">Side effects</h4>
<p>If the behaviour of a mock object when called is more complex than returning a value, the <code class="language-plaintext highlighter-rouge">side_effect</code> attribute can be used.
For example, the mock object may need to instantiate new objects that can be used in an assignment operation.
Similarly to <code class="language-plaintext highlighter-rouge">return_value</code>, the side effect can be set in either the constructor or in the attribute.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Function to be set as the side effect
</span><span class="k">def</span> <span class="nf">side_effect</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
    <span class="k">return</span> <span class="bp">True</span>

<span class="c1"># Set in the constructor
</span><span class="n">mock_object</span> <span class="o">=</span> <span class="n">Mock</span><span class="p">(</span><span class="n">side_effect</span><span class="o">=</span><span class="n">side_effect</span><span class="p">)</span>
<span class="n">mock_object</span><span class="p">()</span>
<span class="c1"># True
</span>
<span class="c1"># Set in the attribute
</span><span class="n">mock_object</span> <span class="o">=</span> <span class="n">Mock</span><span class="p">()</span>
<span class="n">mock_object</span><span class="p">.</span><span class="n">side_effect</span> <span class="o">=</span> <span class="n">side_effect</span>
<span class="n">mock_object</span><span class="p">()</span>
<span class="c1"># True
</span></code></pre></div></div>

<h3 id="magicmock-class">MagicMock class</h3>
<p>When mocking classes, sometimes the protocol methods are needed and are not available by default with <code class="language-plaintext highlighter-rouge">Mock</code>, which requires some work to set them up.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Setting the __len__ method on a mock object
</span><span class="n">mock_object</span> <span class="o">=</span> <span class="n">Mock</span><span class="p">()</span>
<span class="n">mock_object</span><span class="p">.</span><span class="n">__len__</span> <span class="o">=</span> <span class="n">Mock</span><span class="p">(</span><span class="n">return_value</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
<span class="nb">len</span><span class="p">(</span><span class="n">mock_object</span><span class="p">)</span>
<span class="c1"># 3
</span></code></pre></div></div>

<blockquote>
  <p>If an <code class="language-plaintext highlighter-rouge">AttributeError</code> is thrown, the cause may be from the mock object not implementing the required <a href="https://docs.python.org/3/library/unittest.mock.html#id3">protocol methods</a>.</p>
</blockquote>

<p>To use the protocol methods without having to set each one manually, the <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.MagicMock"><strong>MagicMock class</strong></a> can be used which contains default implementations for each of the methods.
This class is a subclass of <code class="language-plaintext highlighter-rouge">Mock</code> and, therefore, the features discussed above are also available in <code class="language-plaintext highlighter-rouge">MagicMock</code>.</p>

<h3 id="patch">Patch</h3>
<p>Also included in the library is a versatile function called <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch"><strong>patch</strong></a>, which can be used as a decorator or context manager.
It examines a module to find a specific object and replaces it with the mock object, known as <strong>patching</strong> or <strong>monkey patching</strong>.</p>

<blockquote>
  <p>Monkey patch is the replacement of one object with another at runtime <a href="https://en.wikipedia.org/wiki/Monkey_patch">Wikipedia</a>.</p>
</blockquote>

<p>When patching, the mock object is placed only within a defined scope and handles the unpatching of the object when it is outside of the scope.
An example of its use is shown below:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Decorator
</span><span class="o">@</span><span class="n">patch</span><span class="p">(</span><span class="s">'module.Class'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">test_function</span><span class="p">(</span><span class="n">mock_object</span><span class="p">):</span>
    <span class="k">pass</span>

<span class="c1"># Context manager
</span><span class="k">def</span> <span class="nf">test_function</span><span class="p">():</span>
    <span class="k">with</span> <span class="n">patch</span><span class="p">(</span><span class="s">'module.Class'</span><span class="p">)</span> <span class="k">as</span> <span class="n">mock_object</span><span class="p">:</span>
        <span class="k">pass</span>
</code></pre></div></div>

<p>Here, patch replaces <code class="language-plaintext highlighter-rouge">Class</code> with a <code class="language-plaintext highlighter-rouge">MagicMock</code> instance, i.e. a mock object, inside of <strong>module</strong>.
The mock object is also referenced in the variable <code class="language-plaintext highlighter-rouge">mock_object</code>, which can be used to configure its behaviour.</p>

<p>To patch correctly, <a href="https://www.integralist.co.uk/posts/mocking-in-python/">“specify the location of the resource to be mocked, relevant to where it’s imported”</a>.
For example, if a module, let say <code class="language-plaintext highlighter-rouge">foo</code>, is being tested and you want to replace a class, <code class="language-plaintext highlighter-rouge">bar</code>, that is used inside of <code class="language-plaintext highlighter-rouge">foo</code> with a mock object, the reference passed to patch should refer to where <code class="language-plaintext highlighter-rouge">bar</code> is imported into <code class="language-plaintext highlighter-rouge">foo</code>.
This is due to how patching operates, as it changes the object which a name points to.</p>

<blockquote>
  <p>More information on how to patch correctly is <a href="https://docs.python.org/3/library/unittest.mock.html#where-to-patch">available here</a>.</p>
</blockquote>

<p>The patch library also has several other tools to patch <a href="https://docs.python.org/3/library/unittest.mock.html#patch-object">objects</a> and <a href="https://docs.python.org/3/library/unittest.mock.html#patch-dict">dictionaries</a>.</p>

<h3 id="asyncmock-class">AsyncMock class</h3>
<p>So far this post has looked at mocking synchronous code.
However, as the <strong>asyncio</strong> library grows and its usage increases, the need for testing asynchronous code arises.</p>

<p>To facilitate this, the mock library has the <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.AsyncMock"><strong>AsyncMock class</strong></a>.
The behaviour of this class is slightly different from <code class="language-plaintext highlighter-rouge">Mock</code> and <code class="language-plaintext highlighter-rouge">MagicMock</code>, which can cause some difficulties.</p>

<p>When calling an instance of <code class="language-plaintext highlighter-rouge">AsyncMock</code>, an awaitable is returned, i.e. an async function.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mock_object</span> <span class="o">=</span> <span class="n">AsyncMock</span><span class="p">()</span>
<span class="n">mock_object</span>
<span class="c1"># &lt;AsyncMock id='4558004032'&gt;
</span>
<span class="n">mock_object</span><span class="p">()</span>
<span class="c1"># &lt;coroutine object AsyncMockMixin._execute_mock_call at 0x10fab2bc0&gt;
</span></code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">return_value</code> and <code class="language-plaintext highlighter-rouge">side_effect</code> attributes can be set on an <code class="language-plaintext highlighter-rouge">AsyncMock</code> instance to define the value returned by the coroutine.
If they are not set, the coroutine returns a new instance of <code class="language-plaintext highlighter-rouge">AsyncMock</code>.</p>

<blockquote>
  <p>To receive the return value from the coroutine, it must be awaited.
More information is available at the <a href="https://docs.python.org/3/library/asyncio.html">asyncio docs</a>.</p>
</blockquote>

<h2 id="use-cases">Use cases</h2>
<p>Now that the basics of mocking in python are understood, some use cases can be reviewed.</p>

<h3 id="mocking-functions">Mocking functions</h3>
<p>The first use case is to mock a function.
As shown previously, this can be achieved using <code class="language-plaintext highlighter-rouge">Mock</code>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mock_function</span> <span class="o">=</span> <span class="n">Mock</span><span class="p">(</span><span class="n">return_value</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">mock_function</span><span class="p">()</span>
<span class="c1"># True
</span><span class="n">mock_function</span><span class="p">.</span><span class="n">assert_called_once</span><span class="p">()</span>
</code></pre></div></div>

<h3 id="mocking-class-methods">Mocking class methods</h3>
<p>The second use case may be to mock methods of classes.
Doing so requires setting a class method to a Mock instance, as shown below:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">real_instance</span> <span class="o">=</span> <span class="n">RealClass</span><span class="p">()</span>
<span class="n">real_instance</span><span class="p">.</span><span class="n">method</span> <span class="o">=</span> <span class="n">Mock</span><span class="p">()</span>

<span class="n">real_instance</span><span class="p">.</span><span class="n">method</span><span class="p">()</span>
<span class="c1"># &lt;Mock name='mock.method()' id='...'&gt;
</span>
<span class="n">real_instance</span><span class="p">.</span><span class="n">method</span><span class="p">.</span><span class="n">assert_called_once</span><span class="p">()</span>
</code></pre></div></div>

<h3 id="mocking-classes">Mocking Classes</h3>
<p>The third use case is to mock an entire class.
When a class is mocked, the class is replaced with <code class="language-plaintext highlighter-rouge">Mock</code>.
This means that calling the original class results in new instances of <code class="language-plaintext highlighter-rouge">Mock</code>.
However, to access the new instances, the <code class="language-plaintext highlighter-rouge">return_value</code> attribute must be accessed first.
This is due to <code class="language-plaintext highlighter-rouge">return_value</code> storing a reference to the new instances.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mock_class</span> <span class="o">=</span> <span class="n">Mock</span><span class="p">()</span>
<span class="c1"># Access return_value to access the new
# Mock instance created later on.
</span><span class="n">mock_class</span><span class="p">.</span><span class="n">return_value</span><span class="p">.</span><span class="n">get</span><span class="p">.</span><span class="n">return_value</span> <span class="o">=</span> <span class="bp">True</span>

<span class="n">mock_class_instance</span> <span class="o">=</span> <span class="n">mock_class</span><span class="p">()</span>
<span class="n">mock_class_instance</span><span class="p">.</span><span class="n">get</span><span class="p">()</span>
<span class="c1"># True
</span>
<span class="n">mock_class</span><span class="p">.</span><span class="n">return_value</span><span class="p">.</span><span class="n">get</span><span class="p">.</span><span class="n">assert_called_once</span><span class="p">()</span>
<span class="c1"># or
</span><span class="n">mock_class_instance</span><span class="p">.</span><span class="n">get</span><span class="p">.</span><span class="n">assert_called_once</span><span class="p">()</span>
</code></pre></div></div>

<h3 id="mocking-chained-calls">Mocking chained calls</h3>
<p><a href="https://docs.python.org/3/library/unittest.mock-examples.html#mocking-chained-calls">Mocking chained calls</a> is a more complex use case, however, one which the mock library is capable of handling through the use of the <code class="language-plaintext highlighter-rouge">return_value</code> attribute.
As previously mentioned in <strong>Mocking classes</strong>, every time a call is made a new Mock instance is created and it is accessible via the <code class="language-plaintext highlighter-rouge">return_value</code> attribute.
Therefore, to step through a chain of calls, where each call is a new <code class="language-plaintext highlighter-rouge">Mock</code> instance, access the <code class="language-plaintext highlighter-rouge">return_value</code> attribute of each <code class="language-plaintext highlighter-rouge">Mock</code> instance.
An example is shown below:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mock_object</span> <span class="o">=</span> <span class="n">Mock</span><span class="p">()</span>
<span class="c1"># &lt;Mock id='...'&gt;
</span>
<span class="n">mock_object</span><span class="p">()</span>
<span class="c1"># &lt;Mock name='mock()' id='...'&gt;
</span><span class="n">mock_object</span><span class="p">.</span><span class="n">assert_called</span><span class="p">()</span>

<span class="n">mock_object</span><span class="p">.</span><span class="n">get</span><span class="p">()</span>
<span class="c1"># &lt;Mock name='mock.get()' id='...'&gt;
</span><span class="n">mock_object</span><span class="p">.</span><span class="n">get</span><span class="p">.</span><span class="n">assert_called</span><span class="p">()</span>

<span class="n">mock_object</span><span class="p">.</span><span class="n">get</span><span class="p">().</span><span class="nb">set</span><span class="p">()</span>
<span class="c1"># &lt;Mock name='mock.get().set()' id='...'&gt;
</span><span class="n">mock_object</span><span class="p">.</span><span class="n">get</span><span class="p">.</span><span class="n">return_value</span><span class="p">.</span><span class="nb">set</span><span class="p">.</span><span class="n">assert_called</span><span class="p">()</span>

<span class="n">mock_object</span><span class="p">.</span><span class="n">get</span><span class="p">().</span><span class="nb">set</span><span class="p">().</span><span class="n">get</span><span class="p">()</span>
<span class="c1"># &lt;Mock name='mock.get().set().get()' id='...'&gt;
</span><span class="n">mock_object</span><span class="p">.</span><span class="n">get</span><span class="p">.</span><span class="n">return_value</span><span class="p">.</span><span class="nb">set</span><span class="p">.</span><span class="n">return_value</span><span class="p">.</span><span class="n">get</span><span class="p">.</span><span class="n">assert_called</span><span class="p">()</span>
</code></pre></div></div>

<p>Being able to access the new instance in a chained call means the behaviour of a mock object can be defined:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mock_object</span> <span class="o">=</span> <span class="n">Mock</span><span class="p">()</span>
<span class="n">config</span> <span class="o">=</span> <span class="p">{</span><span class="s">'get.return_value.set.return_value.get.return_value'</span><span class="p">:</span> <span class="bp">True</span><span class="p">}</span>
<span class="n">mock_object</span><span class="p">.</span><span class="n">configure_mock</span><span class="p">(</span><span class="o">**</span><span class="n">config</span><span class="p">)</span>

<span class="n">mock_object</span><span class="p">.</span><span class="n">get</span><span class="p">().</span><span class="nb">set</span><span class="p">().</span><span class="n">get</span><span class="p">()</span>
<span class="c1"># True
</span></code></pre></div></div>

<p>As you may have noticed, the chain of calls can become long, and asserting that a set of particular calls have been made can become difficult.
Therefore, the <code class="language-plaintext highlighter-rouge">call.call_list()</code> <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.call.call_list">function</a> can be used to create the chain of calls.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">chained</span> <span class="o">=</span> <span class="n">call</span><span class="p">.</span><span class="n">get</span><span class="p">().</span><span class="nb">set</span><span class="p">().</span><span class="n">get</span><span class="p">()</span>
<span class="n">call_list</span> <span class="o">=</span> <span class="n">chained</span><span class="p">.</span><span class="n">call_list</span><span class="p">()</span>
<span class="k">assert</span> <span class="n">mock_object</span><span class="p">.</span><span class="n">mock_calls</span> <span class="o">==</span> <span class="n">call_list</span>
</code></pre></div></div>

<p>To reduce the call chain further, a reference to a particular mock object can be stored and used later:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mock_object</span> <span class="o">=</span> <span class="n">Mock</span><span class="p">()</span>
<span class="n">mock_object_foo</span> <span class="o">=</span> <span class="n">mock_object</span><span class="p">.</span><span class="n">foo</span>
<span class="n">mock_object_bar</span> <span class="o">=</span> <span class="n">mock_object</span><span class="p">.</span><span class="n">bar</span>

<span class="n">mock_object_foo</span><span class="p">.</span><span class="n">something</span><span class="p">()</span>
<span class="c1"># &lt;Mock name='mock.foo.something()' id='...'&gt;
</span><span class="n">mock_object_bar</span><span class="p">.</span><span class="n">other</span><span class="p">.</span><span class="n">thing</span><span class="p">()</span>
<span class="c1"># &lt;Mock name='mock.bar.other.thing()' id='...'&gt;
</span>
<span class="n">mock_object</span><span class="p">.</span><span class="n">mock_calls</span>
<span class="p">[</span><span class="n">call</span><span class="p">.</span><span class="n">foo</span><span class="p">.</span><span class="n">something</span><span class="p">(),</span> <span class="n">call</span><span class="p">.</span><span class="n">bar</span><span class="p">.</span><span class="n">other</span><span class="p">.</span><span class="n">thing</span><span class="p">()]</span>

<span class="n">expected_calls</span> <span class="o">=</span> <span class="p">[</span><span class="n">call</span><span class="p">.</span><span class="n">foo</span><span class="p">.</span><span class="n">something</span><span class="p">(),</span> <span class="n">call</span><span class="p">.</span><span class="n">bar</span><span class="p">.</span><span class="n">other</span><span class="p">.</span><span class="n">thing</span><span class="p">()]</span>
<span class="n">manager</span><span class="p">.</span><span class="n">mock_calls</span> <span class="o">==</span> <span class="n">expected_calls</span>
<span class="c1"># True
</span></code></pre></div></div>

<h3 id="asynchronous-context-managers">Asynchronous Context Managers</h3>
<p>The final use case may see the mocking of context managers, which can be tricky to configure.
This is especially true for asynchronous context managers as the use of the <code class="language-plaintext highlighter-rouge">async</code> keyword can result in an <code class="language-plaintext highlighter-rouge">AsyncMock</code> instance returning a coroutine, which does not have the necessary protocol methods: <code class="language-plaintext highlighter-rouge">___aenter__()</code>; and, <code class="language-plaintext highlighter-rouge">__aexit__()</code>.
Therefore, to prevent an <code class="language-plaintext highlighter-rouge">AttributeError</code> being thrown for either of the protocol methods, an instance of <code class="language-plaintext highlighter-rouge">MagicMock</code> should be explicitly stated.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Mock</span> <span class="o">=</span> <span class="n">MagicMock</span><span class="p">()</span>
<span class="n">config</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">'return_value.__aenter__.return_value.get'</span><span class="p">:</span> <span class="n">MagicMock</span><span class="p">(),</span>
    <span class="s">'return_value.__aenter__.return_value.get.return_value.__aenter__.return_value.text.return_value'</span><span class="p">:</span> <span class="mi">100</span>
<span class="p">}</span>
<span class="n">Mock</span><span class="p">.</span><span class="n">configure_mock</span><span class="p">(</span><span class="o">**</span><span class="n">config</span><span class="p">)</span>

<span class="n">url</span> <span class="o">=</span> <span class="s">'https://localhost'</span>

<span class="k">async</span> <span class="k">with</span> <span class="n">Mock</span><span class="p">()</span> <span class="k">as</span> <span class="n">session</span><span class="p">:</span>
    <span class="k">async</span> <span class="k">with</span> <span class="n">session</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">)</span> <span class="k">as</span> <span class="n">response</span><span class="p">:</span>
        <span class="n">result</span> <span class="o">=</span> <span class="k">await</span> <span class="n">response</span><span class="p">.</span><span class="n">text</span><span class="p">()</span>

<span class="k">assert</span> <span class="n">result</span> <span class="o">==</span> <span class="mi">100</span>
</code></pre></div></div>

<p>Stepping through the example above, first, an instance of <code class="language-plaintext highlighter-rouge">MagicMock</code> is created and a reference to it is stored in the variable <code class="language-plaintext highlighter-rouge">Mock</code>.
Next, the mock object is configured to return a new instance of <code class="language-plaintext highlighter-rouge">MagicMock</code> for a method called get, and the value 100 for a method called text.
With this first section of code, we have explicitly set <code class="language-plaintext highlighter-rouge">MagicMock</code> to be used for the two asynchronous context managers that are present in the next section of code.</p>

<blockquote>
  <p>The <a href="https://docs.python.org/3/library/unittest.mock-examples.html#mocking-asynchronous-context-manager">python documentation</a> provides an example of mocking asynchronous context managers by creating a class and passing it as a spec to a MagicMock instance, however, I have not been able to successfully apply this approach.</p>
</blockquote>

<h2 id="conclusion">Conclusion</h2>
<p>This post has looked at the mock library to see how objects can be mocked in python.
The core tools available in the library were discussed, including the Mock, MagicMock, and AsyncMock classes.
These classes allow for the creation of mock objects, the configuration of specific behaviour, and assertion of interaction.
Additionally, the patch library was reviewed and its ability to replace objects with mock objects.
Finally, a few use cases were discussed and the use of the <code class="language-plaintext highlighter-rouge">return_value</code> attribute to not only set a value but, also to access returned values by methods and functions for configuration and assertion purposes.</p>
:ET